//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.02.27 at 11:19:17 AM EST 
//


package ca.gc.cra.fxit.xmlt.generated.jaxb.etr;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for EtrATRorAPAType_EnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="EtrATRorAPAType_EnumType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="ETR1001"/&gt;
 *     &lt;enumeration value="ETR1002"/&gt;
 *     &lt;enumeration value="ETR1003"/&gt;
 *     &lt;enumeration value="ETR1004"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "EtrATRorAPAType_EnumType")
@XmlEnum
public enum EtrATRorAPATypeEnumType {


    /**
     * Advance tax ruling
     * 
     */
    @XmlEnumValue("ETR1001")
    ETR_1001("ETR1001"),

    /**
     * Advance pricing arrangement
     * 
     */
    @XmlEnumValue("ETR1002")
    ETR_1002("ETR1002"),

    /**
     * Combined ruling and APA
     * 
     */
    @XmlEnumValue("ETR1003")
    ETR_1003("ETR1003"),

    /**
     * Not classified
     * 
     */
    @XmlEnumValue("ETR1004")
    ETR_1004("ETR1004");
    private final String value;

    EtrATRorAPATypeEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EtrATRorAPATypeEnumType fromValue(String v) {
        for (EtrATRorAPATypeEnumType c: EtrATRorAPATypeEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
